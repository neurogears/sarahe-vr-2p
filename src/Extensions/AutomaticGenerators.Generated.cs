//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AutomaticGenerators
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Block
    {
    
        private int _size = 40;
    
        private int _tailSize = 0;
    
        private System.Collections.Generic.List<double> _trialProbability = new System.Collections.Generic.List<double>();
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="size")]
        public int Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="tailSize")]
        public int TailSize
        {
            get
            {
                return _tailSize;
            }
            set
            {
                _tailSize = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trialProbability")]
        public System.Collections.Generic.List<double> TrialProbability
        {
            get
            {
                return _trialProbability;
            }
            set
            {
                _trialProbability = value;
            }
        }
    
        public System.IObservable<Block> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Block
                {
                    Size = _size,
                    TailSize = _tailSize,
                    TrialProbability = _trialProbability
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CorridorSegment
    {
    
        private bool _initialVisibility = true;
    
        private string _name;
    
        private double _positionEnd = 1D;
    
        private double _positionStart = 0D;
    
        private StimControl _stimControl;
    
        private int _textureLeft = 0;
    
        private int _textureRight = 0;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialVisibility")]
        public bool InitialVisibility
        {
            get
            {
                return _initialVisibility;
            }
            set
            {
                _initialVisibility = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionEnd")]
        public double PositionEnd
        {
            get
            {
                return _positionEnd;
            }
            set
            {
                _positionEnd = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionStart")]
        public double PositionStart
        {
            get
            {
                return _positionStart;
            }
            set
            {
                _positionStart = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimControl")]
        public StimControl StimControl
        {
            get
            {
                return _stimControl;
            }
            set
            {
                _stimControl = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureLeft")]
        public int TextureLeft
        {
            get
            {
                return _textureLeft;
            }
            set
            {
                _textureLeft = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureRight")]
        public int TextureRight
        {
            get
            {
                return _textureRight;
            }
            set
            {
                _textureRight = value;
            }
        }
    
        public System.IObservable<CorridorSegment> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CorridorSegment
                {
                    InitialVisibility = _initialVisibility,
                    Name = _name,
                    PositionEnd = _positionEnd,
                    PositionStart = _positionStart,
                    StimControl = _stimControl,
                    TextureLeft = _textureLeft,
                    TextureRight = _textureRight
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FloorSegment
    {
    
        private bool _initialVisibility = true;
    
        private string _name;
    
        private double _positionEnd = 1D;
    
        private double _positionStart = 0D;
    
        private int _texture = 0;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialVisibility")]
        public bool InitialVisibility
        {
            get
            {
                return _initialVisibility;
            }
            set
            {
                _initialVisibility = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionEnd")]
        public double PositionEnd
        {
            get
            {
                return _positionEnd;
            }
            set
            {
                _positionEnd = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionStart")]
        public double PositionStart
        {
            get
            {
                return _positionStart;
            }
            set
            {
                _positionStart = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="texture")]
        public int Texture
        {
            get
            {
                return _texture;
            }
            set
            {
                _texture = value;
            }
        }
    
        public System.IObservable<FloorSegment> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new FloorSegment
                {
                    InitialVisibility = _initialVisibility,
                    Name = _name,
                    PositionEnd = _positionEnd,
                    PositionStart = _positionStart,
                    Texture = _texture
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OptoStimProtocol
    {
    
        private double _delay = 0D;
    
        private double _location = 0D;
    
        private int _waveformIndex = 0;
    
        private double? _abortLocation;
    
        private double _abortDelay = 0D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="location")]
        public double Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="waveformIndex")]
        public int WaveformIndex
        {
            get
            {
                return _waveformIndex;
            }
            set
            {
                _waveformIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abortLocation")]
        public double? AbortLocation
        {
            get
            {
                return _abortLocation;
            }
            set
            {
                _abortLocation = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abortDelay")]
        public double AbortDelay
        {
            get
            {
                return _abortDelay;
            }
            set
            {
                _abortDelay = value;
            }
        }
    
        public System.IObservable<OptoStimProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OptoStimProtocol
                {
                    Delay = _delay,
                    Location = _location,
                    WaveformIndex = _waveformIndex,
                    AbortLocation = _abortLocation,
                    AbortDelay = _abortDelay
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PassiveModeProtocol
    {
    
        private double _gain = 0D;
    
        private double _locationEnd = 0D;
    
        private double _locationStart = 0D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="locationEnd")]
        public double LocationEnd
        {
            get
            {
                return _locationEnd;
            }
            set
            {
                _locationEnd = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="locationStart")]
        public double LocationStart
        {
            get
            {
                return _locationStart;
            }
            set
            {
                _locationStart = value;
            }
        }
    
        public System.IObservable<PassiveModeProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PassiveModeProtocol
                {
                    Gain = _gain,
                    LocationEnd = _locationEnd,
                    LocationStart = _locationStart
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardProtocol
    {
    
        private double _amountHigh = 0D;
    
        private double _amountLow = 0D;
    
        private double _delay = 0D;
    
        private double _location = 0D;
    
        private double _probabilityHigh = 1D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amountHigh")]
        public double AmountHigh
        {
            get
            {
                return _amountHigh;
            }
            set
            {
                _amountHigh = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amountLow")]
        public double AmountLow
        {
            get
            {
                return _amountLow;
            }
            set
            {
                _amountLow = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="location")]
        public double Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="probabilityHigh")]
        public double ProbabilityHigh
        {
            get
            {
                return _probabilityHigh;
            }
            set
            {
                _probabilityHigh = value;
            }
        }
    
        public System.IObservable<RewardProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardProtocol
                {
                    AmountHigh = _amountHigh,
                    AmountLow = _amountLow,
                    Delay = _delay,
                    Location = _location,
                    ProbabilityHigh = _probabilityHigh
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TeleportOnLickProtocol
    {
    
        private double _destination = 0D;
    
        private double _locationEnd = 10D;
    
        private double _locationStart = 0D;
    
        private int? _maxRepeats;
    
        private double _refractoryDuration = 0D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="destination")]
        public double Destination
        {
            get
            {
                return _destination;
            }
            set
            {
                _destination = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="locationEnd")]
        public double LocationEnd
        {
            get
            {
                return _locationEnd;
            }
            set
            {
                _locationEnd = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="locationStart")]
        public double LocationStart
        {
            get
            {
                return _locationStart;
            }
            set
            {
                _locationStart = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxRepeats")]
        public int? MaxRepeats
        {
            get
            {
                return _maxRepeats;
            }
            set
            {
                _maxRepeats = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="refractoryDuration")]
        public double RefractoryDuration
        {
            get
            {
                return _refractoryDuration;
            }
            set
            {
                _refractoryDuration = value;
            }
        }
    
        public System.IObservable<TeleportOnLickProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TeleportOnLickProtocol
                {
                    Destination = _destination,
                    LocationEnd = _locationEnd,
                    LocationStart = _locationStart,
                    MaxRepeats = _maxRepeats,
                    RefractoryDuration = _refractoryDuration
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TeleportProtocol
    {
    
        private double _destination = 0D;
    
        private bool _endTrialOnTeleport = true;
    
        private double _location = 10D;
    
        private bool _lockAtLocation = false;
    
        private double _lockAtLocationDuration = 0D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="destination")]
        public double Destination
        {
            get
            {
                return _destination;
            }
            set
            {
                _destination = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endTrialOnTeleport")]
        public bool EndTrialOnTeleport
        {
            get
            {
                return _endTrialOnTeleport;
            }
            set
            {
                _endTrialOnTeleport = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="location")]
        public double Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lockAtLocation")]
        public bool LockAtLocation
        {
            get
            {
                return _lockAtLocation;
            }
            set
            {
                _lockAtLocation = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lockAtLocationDuration")]
        public double LockAtLocationDuration
        {
            get
            {
                return _lockAtLocationDuration;
            }
            set
            {
                _lockAtLocationDuration = value;
            }
        }
    
        public System.IObservable<TeleportProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TeleportProtocol
                {
                    Destination = _destination,
                    EndTrialOnTeleport = _endTrialOnTeleport,
                    Location = _location,
                    LockAtLocation = _lockAtLocation,
                    LockAtLocationDuration = _lockAtLocationDuration
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Trial
    {
    
        private System.Collections.Generic.List<CorridorSegment> _corridorSegments = new System.Collections.Generic.List<CorridorSegment>();
    
        private System.Collections.Generic.List<FloorSegment> _floorSegments = new System.Collections.Generic.List<FloorSegment>();
    
        private System.Collections.Generic.List<OptoStimProtocol> _optoStim = new System.Collections.Generic.List<OptoStimProtocol>();
    
        private System.Collections.Generic.List<PassiveModeProtocol> _passiveMode = new System.Collections.Generic.List<PassiveModeProtocol>();
    
        private System.Collections.Generic.List<RewardProtocol> _reward = new System.Collections.Generic.List<RewardProtocol>();
    
        private System.Collections.Generic.List<TeleportProtocol> _teleport = new System.Collections.Generic.List<TeleportProtocol>();
    
        private System.Collections.Generic.List<TeleportOnLickProtocol> _teleportOnLick = new System.Collections.Generic.List<TeleportOnLickProtocol>();
    
        private string _trialTypeLabel = "";
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="corridorSegments")]
        public System.Collections.Generic.List<CorridorSegment> CorridorSegments
        {
            get
            {
                return _corridorSegments;
            }
            set
            {
                _corridorSegments = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="floorSegments")]
        public System.Collections.Generic.List<FloorSegment> FloorSegments
        {
            get
            {
                return _floorSegments;
            }
            set
            {
                _floorSegments = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="optoStim")]
        public System.Collections.Generic.List<OptoStimProtocol> OptoStim
        {
            get
            {
                return _optoStim;
            }
            set
            {
                _optoStim = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="passiveMode")]
        public System.Collections.Generic.List<PassiveModeProtocol> PassiveMode
        {
            get
            {
                return _passiveMode;
            }
            set
            {
                _passiveMode = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public System.Collections.Generic.List<RewardProtocol> Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="teleport")]
        public System.Collections.Generic.List<TeleportProtocol> Teleport
        {
            get
            {
                return _teleport;
            }
            set
            {
                _teleport = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="teleportOnLick")]
        public System.Collections.Generic.List<TeleportOnLickProtocol> TeleportOnLick
        {
            get
            {
                return _teleportOnLick;
            }
            set
            {
                _teleportOnLick = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trialTypeLabel")]
        public string TrialTypeLabel
        {
            get
            {
                return _trialTypeLabel;
            }
            set
            {
                _trialTypeLabel = value;
            }
        }
    
        public System.IObservable<Trial> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Trial
                {
                    CorridorSegments = _corridorSegments,
                    FloorSegments = _floorSegments,
                    OptoStim = _optoStim,
                    PassiveMode = _passiveMode,
                    Reward = _reward,
                    Teleport = _teleport,
                    TeleportOnLick = _teleportOnLick,
                    TrialTypeLabel = _trialTypeLabel
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CorridorSession
    {
    
        private Metadata _metadata;
    
        private System.Collections.Generic.List<Trial> _trials = new System.Collections.Generic.List<Trial>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials")]
        public System.Collections.Generic.List<Trial> Trials
        {
            get
            {
                return _trials;
            }
            set
            {
                _trials = value;
            }
        }
    
        public System.IObservable<CorridorSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CorridorSession
                {
                    Metadata = _metadata,
                    Trials = _trials
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StimControl
    {
    
        private double _delay = 0D;
    
        private bool _leftStimState = true;
    
        private double _location = 0D;
    
        private bool _rightStimState = true;
    
        private int _stimTextureLeft = 0;
    
        private int _stimTextureRight = 0;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Determines whether the wall texture will be update to the stimTexture or not.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="leftStimState")]
        [System.ComponentModel.DescriptionAttribute("Determines whether the wall texture will be update to the stimTexture or not.")]
        public bool LeftStimState
        {
            get
            {
                return _leftStimState;
            }
            set
            {
                _leftStimState = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="location")]
        public double Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
    
        /// <summary>
        /// Determines whether the wall texture will be update to the stimTexture or not.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rightStimState")]
        [System.ComponentModel.DescriptionAttribute("Determines whether the wall texture will be update to the stimTexture or not.")]
        public bool RightStimState
        {
            get
            {
                return _rightStimState;
            }
            set
            {
                _rightStimState = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimTextureLeft")]
        public int StimTextureLeft
        {
            get
            {
                return _stimTextureLeft;
            }
            set
            {
                _stimTextureLeft = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimTextureRight")]
        public int StimTextureRight
        {
            get
            {
                return _stimTextureRight;
            }
            set
            {
                _stimTextureRight = value;
            }
        }
    
        public System.IObservable<StimControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new StimControl
                {
                    Delay = _delay,
                    LeftStimState = _leftStimState,
                    Location = _location,
                    RightStimState = _rightStimState,
                    StimTextureLeft = _stimTextureLeft,
                    StimTextureRight = _stimTextureRight
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private System.Collections.Generic.List<string> _waveformBankPath = new System.Collections.Generic.List<string>();
    
        private System.Collections.Generic.List<string> _textureBankPath = new System.Collections.Generic.List<string>();
    
        private double _defaultEncoderGain = 0.0005D;
    
        private int? _randomSeed;
    
        private RewardCalibration _rewardCalibration;
    
        private string _rootPath = "";
    
        private TrialOrder _trialOrder;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="waveformBankPath")]
        public System.Collections.Generic.List<string> WaveformBankPath
        {
            get
            {
                return _waveformBankPath;
            }
            set
            {
                _waveformBankPath = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureBankPath")]
        public System.Collections.Generic.List<string> TextureBankPath
        {
            get
            {
                return _textureBankPath;
            }
            set
            {
                _textureBankPath = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="defaultEncoderGain")]
        public double DefaultEncoderGain
        {
            get
            {
                return _defaultEncoderGain;
            }
            set
            {
                _defaultEncoderGain = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="randomSeed")]
        public int? RandomSeed
        {
            get
            {
                return _randomSeed;
            }
            set
            {
                _randomSeed = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardCalibration")]
        public RewardCalibration RewardCalibration
        {
            get
            {
                return _rewardCalibration;
            }
            set
            {
                _rewardCalibration = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trialOrder")]
        public TrialOrder TrialOrder
        {
            get
            {
                return _trialOrder;
            }
            set
            {
                _trialOrder = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    AnimalId = _animalId,
                    WaveformBankPath = _waveformBankPath,
                    TextureBankPath = _textureBankPath,
                    DefaultEncoderGain = _defaultEncoderGain,
                    RandomSeed = _randomSeed,
                    RewardCalibration = _rewardCalibration,
                    RootPath = _rootPath,
                    TrialOrder = _trialOrder
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardCalibration
    {
    
        private double _intercept = 0D;
    
        private double _slope = 1D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intercept")]
        public double Intercept
        {
            get
            {
                return _intercept;
            }
            set
            {
                _intercept = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slope")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        public System.IObservable<RewardCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardCalibration
                {
                    Intercept = _intercept,
                    Slope = _slope
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TrialOrder
    {
    
        private System.Collections.Generic.List<Block> _blocks = new System.Collections.Generic.List<Block>();
    
        private TrialOrderMode _mode = AutomaticGenerators.TrialOrderMode.List;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="blocks")]
        public System.Collections.Generic.List<Block> Blocks
        {
            get
            {
                return _blocks;
            }
            set
            {
                _blocks = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mode")]
        public TrialOrderMode Mode
        {
            get
            {
                return _mode;
            }
            set
            {
                _mode = value;
            }
        }
    
        public System.IObservable<TrialOrder> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TrialOrder
                {
                    Blocks = _blocks,
                    Mode = _mode
                }));
        }
    }


    public enum TrialOrderMode
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="list")]
        List = 0,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="shuffle")]
        Shuffle = 1,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="block")]
        Block = 2,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSegment> source)
        {
            return Process<CorridorSegment>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FloorSegment> source)
        {
            return Process<FloorSegment>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimProtocol> source)
        {
            return Process<OptoStimProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PassiveModeProtocol> source)
        {
            return Process<PassiveModeProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardProtocol> source)
        {
            return Process<RewardProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TeleportOnLickProtocol> source)
        {
            return Process<TeleportOnLickProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TeleportProtocol> source)
        {
            return Process<TeleportProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSession> source)
        {
            return Process<CorridorSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimControl> source)
        {
            return Process<StimControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardCalibration> source)
        {
            return Process<RewardCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrialOrder> source)
        {
            return Process<TrialOrder>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSegment>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FloorSegment>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PassiveModeProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TeleportOnLickProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TeleportProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrialOrder>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<CorridorSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}